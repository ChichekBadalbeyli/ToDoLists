//
//  CoreDataManager.swift
//  ToDoList
//
//  Created by Chichek on 06.12.24.
//

import Foundation
import CoreData
import UIKit

class CoreDataManager {
    
    static let shared = CoreDataManager()
    let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext

    func saveToDo(_ newTodo: Todo, description: String, createdDate: Date) {
        let fetchRequest: NSFetchRequest<ToDoEntity> = ToDoEntity.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "id == %d", newTodo.id)

        do {
            let results = try context.fetch(fetchRequest)
            if let existingTodo = results.first {
                // üîπ –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
                existingTodo.todo = newTodo.todo
                existingTodo.completed = newTodo.completed
                existingTodo.userId = Int64(newTodo.userID)
                existingTodo.createdDate = createdDate
                existingTodo.descriptionText = description
                existingTodo.isDelete = false
            } else {
                // üîπ –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                let todoEntity = ToDoEntity(context: context)
                todoEntity.id = Int64(newTodo.id)
                todoEntity.todo = newTodo.todo
                todoEntity.completed = newTodo.completed
                todoEntity.userId = Int64(newTodo.userID)
                todoEntity.createdDate = createdDate
                todoEntity.descriptionText = description
                todoEntity.isDelete = false
            }
            saveContext()
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ToDo –≤ CoreData: \(error)")
        }
    }

    func updateToDoDescriptionAndDate(byID id: Int, newDescription: String, newDate: Date) {
        let fetchRequest: NSFetchRequest<ToDoEntity> = ToDoEntity.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "id == %d", id)

        do {
            let results = try context.fetch(fetchRequest)
            if let todoEntity = results.first {
                todoEntity.descriptionText = newDescription
                todoEntity.createdDate = newDate
                saveContext()
            }
        } catch {
            print(error.localizedDescription)
        }
    }

    func updateToDoCompletionStatus(byID id: Int, isCompleted: Bool) {
        let fetchRequest: NSFetchRequest<ToDoEntity> = ToDoEntity.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "id == %d", id)

        do {
            let results = try context.fetch(fetchRequest)
            if let todoEntity = results.first {
                todoEntity.completed = isCompleted
                saveContext()
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è completed –≤ CoreData: \(error)")
        }
    }

    func saveContext() {
        if context.hasChanges {
            do {
                try context.save()
            } catch {
                let nserror = error as NSError
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: \(nserror), \(nserror.userInfo)")
            }
        }
    }

    func loadToDos() -> [ToDoEntity] {
        let fetchRequest: NSFetchRequest<ToDoEntity> = ToDoEntity.fetchRequest()

        do {
            return try context.fetch(fetchRequest)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ToDos –∏–∑ CoreData: \(error)")
            return []
        }
    }

    func mergeToDos(apiToDos: [Todo]) {
        for apiTodo in apiToDos {
            let fetchRequest: NSFetchRequest<ToDoEntity> = ToDoEntity.fetchRequest()
            fetchRequest.predicate = NSPredicate(format: "id == %d", apiTodo.id)

            do {
                let results = try context.fetch(fetchRequest)
                if let existingTodo = results.first {
                    // üîπ –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ `todo` –∏ `completed`, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    existingTodo.todo = apiTodo.todo

                    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º `completed`, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                    if existingTodo.completed == false {
                        existingTodo.completed = apiTodo.completed
                    }
                } else {
                    // üîπ –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    let newTodo = ToDoEntity(context: context)
                    newTodo.id = Int64(apiTodo.id)
                    newTodo.todo = apiTodo.todo
                    newTodo.completed = apiTodo.completed
                    newTodo.userId = Int64(apiTodo.userID)
                    newTodo.createdDate = Date()
                    newTodo.descriptionText = "Varsayƒ±lan a√ßƒ±klama"
                    newTodo.isDelete = false
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ToDo –∏–∑ API –≤ CoreData: \(error)")
            }
        }
        saveContext()
    }

    func deleteToDoEntity(_ todoEntity: ToDoEntity) {
        context.delete(todoEntity)
        do {
            try context.save()
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ToDoEntity: \(error)")
        }
    }
}
